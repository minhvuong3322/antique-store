require('dotenv').config();
const http = require('http');
const https = require('https');
const fs = require('fs');
const path = require('path');
const app = require('./app');
const config = require('./config/app');
const { testConnection } = require('./config/database');
const { syncDatabase } = require('./models');

// =====================================================
// KH·ªûI ƒê·ªòNG SERVER
// =====================================================

// =====================================================
// ERROR HANDLERS - X·ª≠ l√Ω unhandled errors
// =====================================================
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection t·∫°i:', promise);
    console.error('L√Ω do:', reason);
    // Log chi ti·∫øt error ƒë·ªÉ debug
    if (reason instanceof Error) {
        console.error('Stack:', reason.stack);
    }
    // Kh√¥ng exit trong development ƒë·ªÉ c√≥ th·ªÉ debug
    if (config.node_env === 'production') {
        // Trong production, c√≥ th·ªÉ exit ƒë·ªÉ container restart
        // process.exit(1);
    }
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception:', error);
    console.error('Stack:', error.stack);
    // Exit trong m·ªçi tr∆∞·ªùng h·ª£p v√¨ app kh√¥ng c√≤n an to√†n
    process.exit(1);
});

const startServer = async () => {
    try {
        // Ki·ªÉm tra k·∫øt n·ªëi database
        await testConnection();

        // Ki·ªÉm tra database schema (kh√¥ng alter)
        // L∆∞u √Ω: S·ª≠ d·ª•ng SQL schema files ƒë·ªÉ qu·∫£n l√Ω database thay v√¨ auto-sync
        if (config.node_env === 'development') {
            console.log('‚úÖ B·ªè qua auto-sync (d√πng SQL schema files)');
            // await syncDatabase({ alter: false }); // T·∫Øt ƒë·ªÉ tr√°nh l·ªói "Too many keys"
        }

        const PORT = config.port;
        let server;
        let protocol = 'http';

        // =====================================================
        // HTTPS Configuration
        // =====================================================
        if (config.ssl.enabled) {
            try {
                // ƒê·ªçc SSL certificate v√† key
                const keyPath = path.resolve(__dirname, '..', config.ssl.keyPath);
                const certPath = path.resolve(__dirname, '..', config.ssl.certPath);

                // Ki·ªÉm tra file t·ªìn t·∫°i
                if (!fs.existsSync(keyPath)) {
                    throw new Error(`SSL key file kh√¥ng t·ªìn t·∫°i: ${keyPath}`);
                }
                if (!fs.existsSync(certPath)) {
                    throw new Error(`SSL certificate file kh√¥ng t·ªìn t·∫°i: ${certPath}`);
                }

                const httpsOptions = {
                    key: fs.readFileSync(keyPath),
                    cert: fs.readFileSync(certPath)
                };

                // T·∫°o HTTPS server
                server = https.createServer(httpsOptions, app);
                protocol = 'https';

                console.log('');
                console.log('========================================');
                console.log('üîí SSL/TLS ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t');
                console.log(`üìÅ Key: ${keyPath}`);
                console.log(`üìÅ Cert: ${certPath}`);
                console.log('========================================');

            } catch (sslError) {
                console.error('‚ùå L·ªói khi kh·ªüi t·∫°o SSL:', sslError.message);
                console.log('‚ö†Ô∏è  Fallback v·ªÅ HTTP server...');
                server = http.createServer(app);
                protocol = 'http';
            }
        } else {
            // T·∫°o HTTP server
            server = http.createServer(app);
            protocol = 'http';
        }

        // Kh·ªüi ƒë·ªông server
        server.listen(PORT, () => {
            console.log('');
            console.log('========================================');
            console.log(`üöÄ Server ƒëang ch·∫°y tr√™n port ${PORT}`);
            console.log(`üìç M√¥i tr∆∞·ªùng: ${config.node_env}`);
            console.log(`üîê Protocol: ${protocol.toUpperCase()}`);
            console.log(`üåê URL API: ${protocol}://localhost:${PORT}${config.api_prefix}`);
            console.log(`üìö Health Check: ${protocol}://localhost:${PORT}${config.api_prefix}/health`);

            if (protocol === 'https' && config.node_env === 'development') {
                console.log('');
                console.log('‚ö†Ô∏è  HTTPS Development Mode:');
                console.log('   Tr√¨nh duy·ªát s·∫Ω c·∫£nh b√°o v·ªÅ self-signed certificate');
                console.log('   Click "Advanced" ‚Üí "Proceed to localhost"');
                console.log('   Ho·∫∑c trust certificate b·∫±ng c√°ch ch·∫°y:');
                console.log('   cd backend/scripts && ./generate-ssl-cert.sh');
            }

            console.log('========================================');
            console.log('');
        });

        // T·∫Øt server m·ªôt c√°ch graceful
        const gracefulShutdown = (signal) => {
            console.log(`\nNh·∫≠n t√≠n hi·ªáu ${signal}: ƒëang ƒë√≥ng ${protocol.toUpperCase()} server`);
            server.close(() => {
                console.log(`${protocol.toUpperCase()} server ƒë√£ ƒë√≥ng`);
                process.exit(0);
            });
        };

        process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
        process.on('SIGINT', () => gracefulShutdown('SIGINT'));

    } catch (error) {
        console.error('‚ùå Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông server:', error);
        process.exit(1);
    }
};

startServer();




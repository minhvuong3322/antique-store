# ==============================================================================
# SSL Certificate Generator for Development (Windows PowerShell)
# ==============================================================================
# T·∫°o self-signed SSL certificate cho m√¥i tr∆∞·ªùng development
# Ch·ª©ng ch·ªâ n√†y KH√îNG ƒë∆∞·ª£c tin t∆∞·ªüng m·∫∑c ƒë·ªãnh b·ªüi tr√¨nh duy·ªát
# v√† ch·ªâ n√™n s·ª≠ d·ª•ng cho development/testing
# ==============================================================================

Write-Host "========================================" -ForegroundColor Green
Write-Host "SSL Certificate Generator (Windows)" -ForegroundColor Green
Write-Host "========================================" -ForegroundColor Green

# T·∫°o th∆∞ m·ª•c certs n·∫øu ch∆∞a c√≥
$certDir = "..\certs"
if (-not (Test-Path $certDir)) {
    New-Item -ItemType Directory -Path $certDir | Out-Null
}

# Ki·ªÉm tra OpenSSL
$openssl = $null
try {
    $openssl = Get-Command openssl -ErrorAction Stop
} catch {
    Write-Host "`n‚ùå L·ªói: OpenSSL kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y!" -ForegroundColor Red
    Write-Host "`nC√†i ƒë·∫∑t OpenSSL:" -ForegroundColor Yellow
    Write-Host "1. Download t·ª´: https://slproweb.com/products/Win32OpenSSL.html" -ForegroundColor White
    Write-Host "2. Ho·∫∑c d√πng Chocolatey: choco install openssl" -ForegroundColor White
    Write-Host "3. Ho·∫∑c d√πng Scoop: scoop install openssl" -ForegroundColor White
    Write-Host "`nHo·∫∑c s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p PowerShell native (kh√¥ng c·∫ßn OpenSSL):" -ForegroundColor Cyan
    
    # Ph∆∞∆°ng ph√°p 2: D√πng PowerShell native (kh√¥ng c·∫ßn OpenSSL)
    $useNative = Read-Host "`nB·∫°n c√≥ mu·ªën t·∫°o certificate b·∫±ng PowerShell native? (Y/N)"
    if ($useNative -eq 'Y' -or $useNative -eq 'y') {
        Write-Host "`nƒêang t·∫°o certificate b·∫±ng PowerShell..." -ForegroundColor Yellow
        
        $cert = New-SelfSignedCertificate `
            -Subject "CN=localhost" `
            -DnsName "localhost", "*.localhost", "127.0.0.1" `
            -KeyAlgorithm RSA `
            -KeyLength 2048 `
            -NotAfter (Get-Date).AddDays(365) `
            -CertStoreLocation "Cert:\CurrentUser\My" `
            -FriendlyName "Antique Store Development Certificate" `
            -HashAlgorithm SHA256 `
            -KeyUsage DigitalSignature, KeyEncipherment, DataEncipherment `
            -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.1")
        
        # Export certificate
        $certPath = Join-Path $certDir "localhost.crt"
        $keyPath = Join-Path $certDir "localhost.key"
        $pfxPath = Join-Path $certDir "localhost.pfx"
        $password = ConvertTo-SecureString -String "dev123" -Force -AsPlainText
        
        # Export to PFX
        Export-PfxCertificate -Cert $cert -FilePath $pfxPath -Password $password | Out-Null
        
        # Export to PEM (certificate)
        $certBytes = $cert.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Cert)
        $certPem = "-----BEGIN CERTIFICATE-----`n" + [System.Convert]::ToBase64String($certBytes, [System.Base64FormattingOptions]::InsertLineBreaks) + "`n-----END CERTIFICATE-----"
        $certPem | Out-File -FilePath $certPath -Encoding ASCII
        
        Write-Host "`n‚úÖ Certificate ƒë√£ ƒë∆∞·ª£c t·∫°o!" -ForegroundColor Green
        Write-Host "üìÅ Certificate: $certPath" -ForegroundColor Cyan
        Write-Host "üìÅ PFX: $pfxPath (password: dev123)" -ForegroundColor Cyan
        Write-Host "`n‚ö†Ô∏è  L∆∞u √Ω: PowerShell kh√¥ng th·ªÉ export private key d∆∞·ªõi d·∫°ng PEM" -ForegroundColor Yellow
        Write-Host "ƒê·ªÉ s·ª≠ d·ª•ng v·ªõi Node.js, c·∫ßn d√πng PFX format ho·∫∑c c√†i OpenSSL" -ForegroundColor Yellow
        
        # Trust certificate
        $trustCert = Read-Host "`nB·∫°n c√≥ mu·ªën trust certificate n√†y? (c·∫ßn quy·ªÅn Administrator) (Y/N)"
        if ($trustCert -eq 'Y' -or $trustCert -eq 'y') {
            $store = New-Object System.Security.Cryptography.X509Certificates.X509Store("Root", "LocalMachine")
            $store.Open("ReadWrite")
            $store.Add($cert)
            $store.Close()
            Write-Host "‚úÖ Certificate ƒë√£ ƒë∆∞·ª£c trust!" -ForegroundColor Green
        }
        
        exit 0
    }
    exit 1
}

Write-Host "`n‚úÖ OpenSSL ƒë√£ ƒë∆∞·ª£c t√¨m th·∫•y: $($openssl.Source)" -ForegroundColor Green

# Th√¥ng tin certificate
$country = "VN"
$state = "HCM"
$city = "Ho Chi Minh"
$organization = "Antique Store"
$commonName = "localhost"
$daysValid = 365

Write-Host "`nƒêang t·∫°o SSL certificate..." -ForegroundColor Yellow

# Ki·ªÉm tra xem ƒë√£ c√≥ certificate ch∆∞a
$keyPath = Join-Path $certDir "localhost.key"
$crtPath = Join-Path $certDir "localhost.crt"

if ((Test-Path $keyPath) -and (Test-Path $crtPath)) {
    Write-Host "`n‚ö†Ô∏è  Certificate ƒë√£ t·ªìn t·∫°i!" -ForegroundColor Yellow
    $recreate = Read-Host "B·∫°n c√≥ mu·ªën t·∫°o l·∫°i? (Y/N)"
    if ($recreate -ne 'Y' -and $recreate -ne 'y') {
        Write-Host "Gi·ªØ nguy√™n certificate hi·ªán t·∫°i." -ForegroundColor Green
        exit 0
    }
}

# T·∫°o private key
Write-Host "`nB∆∞·ªõc 1: T·∫°o private key..." -ForegroundColor Yellow
& openssl genrsa -out $keyPath 2048

# T·∫°o self-signed certificate
Write-Host "B∆∞·ªõc 2: T·∫°o self-signed certificate..." -ForegroundColor Yellow
& openssl req -new -x509 `
    -key $keyPath `
    -out $crtPath `
    -days $daysValid `
    -subj "/C=$country/ST=$state/L=$city/O=$organization/CN=$commonName" `
    -addext "subjectAltName=DNS:localhost,DNS:*.localhost,IP:127.0.0.1,IP:0.0.0.0"

if ($LASTEXITCODE -ne 0) {
    Write-Host "`n‚ùå L·ªói khi t·∫°o certificate!" -ForegroundColor Red
    exit 1
}

Write-Host "`n========================================" -ForegroundColor Green
Write-Host "‚úÖ Certificate ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!" -ForegroundColor Green
Write-Host "========================================" -ForegroundColor Green
Write-Host "üìÅ Location:" -ForegroundColor White
Write-Host "   Private Key: $keyPath" -ForegroundColor Cyan
Write-Host "   Certificate: $crtPath" -ForegroundColor Cyan
Write-Host "`nüìÖ Valid: $daysValid days" -ForegroundColor White

Write-Host "`n‚ö†Ô∏è  QUAN TR·ªåNG:" -ForegroundColor Yellow
Write-Host "   ƒê√¢y l√† self-signed certificate, tr√¨nh duy·ªát s·∫Ω c·∫£nh b√°o" -ForegroundColor White
Write-Host "   'Not Secure' ho·∫∑c 'Certificate Invalid'" -ForegroundColor White

Write-Host "`nüîß ƒê·ªÉ trust certificate:" -ForegroundColor Green
Write-Host "`n   C√°ch 1 - Import v√†o Trusted Root (c·∫ßn quy·ªÅn Administrator):" -ForegroundColor Yellow
Write-Host "   Import-Certificate -FilePath '$crtPath' -CertStoreLocation Cert:\LocalMachine\Root" -ForegroundColor White

Write-Host "`n   C√°ch 2 - Th√¥ng qua tr√¨nh duy·ªát:" -ForegroundColor Yellow
Write-Host "   1. M·ªü Chrome/Edge, truy c·∫≠p https://localhost:5000" -ForegroundColor White
Write-Host "   2. Click 'Advanced' ‚Üí 'Proceed to localhost (unsafe)'" -ForegroundColor White

Write-Host "`n   C√°ch 3 - Enable Chrome flag:" -ForegroundColor Yellow
Write-Host "   chrome://flags/#allow-insecure-localhost ‚Üí Enable" -ForegroundColor White

Write-Host "`n========================================" -ForegroundColor Green

# H·ªèi c√≥ mu·ªën trust certificate kh√¥ng
$trust = Read-Host "`nB·∫°n c√≥ mu·ªën trust certificate n√†y ngay b√¢y gi·ªù? (c·∫ßn quy·ªÅn Administrator) (Y/N)"
if ($trust -eq 'Y' -or $trust -eq 'y') {
    # Ki·ªÉm tra quy·ªÅn Administrator
    $isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
    
    if ($isAdmin) {
        Import-Certificate -FilePath $crtPath -CertStoreLocation Cert:\LocalMachine\Root
        Write-Host "‚úÖ Certificate ƒë√£ ƒë∆∞·ª£c trust!" -ForegroundColor Green
    } else {
        Write-Host "‚ùå C·∫ßn quy·ªÅn Administrator ƒë·ªÉ trust certificate!" -ForegroundColor Red
        Write-Host "Ch·∫°y l·∫°i PowerShell v·ªõi quy·ªÅn Administrator v√† th·ª±c hi·ªán l·ªánh:" -ForegroundColor Yellow
        Write-Host "Import-Certificate -FilePath '$crtPath' -CertStoreLocation Cert:\LocalMachine\Root" -ForegroundColor White
    }
}

Write-Host "`n‚úÖ Setup ho√†n t·∫•t!" -ForegroundColor Green
Write-Host "========================================" -ForegroundColor Green

# Hi·ªÉn th·ªã th√¥ng tin certificate
Write-Host "`nTh√¥ng tin Certificate:" -ForegroundColor Yellow
& openssl x509 -in $crtPath -noout -subject -issuer -dates

exit 0

